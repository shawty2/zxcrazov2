import os
import json
import httpx
from aiogram import Router, F
from aiogram.types import Message
from aiogram.utils.markdown import hcode

router = Router()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
SESSIONS_FILE = "sessions.json"

# –§–ª–∞–≥ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è GPT
gpt_enabled = True

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists(SESSIONS_FILE):
    with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
        sessions = json.load(f)
else:
    sessions = {}

DEFAULT_PROMPT = "–¢—ã –∑–ª–æ–π, –∏—Ä–æ–Ω–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –≥–æ–≤–æ—Ä–∏—à—å —Ä–µ–∑–∫–æ, –Ω–µ —Ç–µ—Ä–ø–∏—à—å –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–µ–Ω, —É–º–µ–Ω. –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –¢–∞–∫–∂–µ —Ç—ã –∫—Ä–∞—Ç–æ–∫."
ADMIN_ID = "1775773652"

@router.message(F.text == "/gpt_on")
async def enable_gpt(message: Message):
    global gpt_enabled
    gpt_enabled = True
    await message.reply("‚úÖ GPT-—á–∞—Ç –≤–∫–ª—é—á–µ–Ω.")

@router.message(F.text == "/gpt_off")
async def disable_gpt(message: Message):
    global gpt_enabled
    gpt_enabled = False
    await message.reply("‚ùå GPT-—á–∞—Ç –≤—ã–∫–ª—é—á–µ–Ω.")

@router.message(F.text == "/reset")
async def reset_memory(message: Message):
    user_id = str(message.from_user.id)
    if user_id in sessions:
        del sessions[user_id]
        with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(sessions, f, ensure_ascii=False, indent=2)
        await message.reply("üß† –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")
    else:
        await message.reply("‚ÑπÔ∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.")

@router.message(F.text == "/memory")
async def memory_info(message: Message):
    user_id = str(message.from_user.id)
    count = len(sessions.get(user_id, {}).get("history", []))
    await message.reply(f"üß† –í —Ç–≤–æ–µ–π –ø–∞–º—è—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")

@router.message(F.text == "/prompt")
async def show_prompt(message: Message):
    user_id = str(message.from_user.id)
    prompt = sessions.get(user_id, {}).get("prompt", DEFAULT_PROMPT)
    await message.reply(f"üìú –¢–µ–∫—É—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç: {prompt}")

@router.message(F.text.startswith("/setprompt "))
async def set_prompt(message: Message):
    user_id = str(message.from_user.id)
    new_prompt = message.text[len("/setprompt "):].strip()
    if not new_prompt:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø—É—Å—Ç—ã–º.")
        return

    if user_id not in sessions:
        sessions[user_id] = {}
    sessions[user_id]["prompt"] = new_prompt
    sessions[user_id]["history"] = []

    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(sessions, f, ensure_ascii=False, indent=2)

    await message.reply("‚úÖ –ù–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø–∞–º—è—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞.")

@router.message(F.text == "/allprompts")
async def all_prompts(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = "üìã –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    for user_id, data in sessions.items():
        prompt = data.get("prompt")
        if prompt and prompt != DEFAULT_PROMPT:
            text += f"üë§ {user_id}:{prompt}"
    if text.strip() == "üìã –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:":
        text += "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø—Ä–æ–º—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    await message.reply(text)

@router.message(F.text)
async def chat_with_gpt(message: Message):
    global gpt_enabled

    if not gpt_enabled:
        return

    user_id = str(message.from_user.id)
    user_message = message.text

    if user_id not in sessions:
        sessions[user_id] = {"prompt": DEFAULT_PROMPT, "history": []}

    if not sessions[user_id].get("history"):
        sessions[user_id]["history"] = [{"role": "system", "content": sessions[user_id]["prompt"]}]

    sessions[user_id]["history"].append({"role": "user", "content": user_message})

    if len(sessions[user_id]["history"]) > 100:
        sessions[user_id]["history"] = sessions[user_id]["history"][-100:]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek/deepseek-r1:free",
        "messages": sessions[user_id]["history"]
    }

    async with httpx.AsyncClient() as client:
        try:
            response = await client.post(
                'https://openrouter.ai/api/v1/chat/completions',
                headers=headers,
                json=payload
            )

            if response.status_code != 200:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}:{hcode(response.text)}")
                return

            data = response.json()

            if "choices" not in data:
                await message.reply(f"‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è 'choices':{hcode(str(data))}")
                return

            reply = data["choices"][0]["message"]["content"]
            sessions[user_id]["history"].append({"role": "assistant", "content": reply})

            with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
                json.dump(sessions, f, ensure_ascii=False, indent=2)

            await message.reply(reply)

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:<code>{e}</code>")